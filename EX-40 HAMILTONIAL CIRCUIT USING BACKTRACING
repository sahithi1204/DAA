#include <stdio.h>
#include <stdbool.h>
#define V 5
bool isSafe(int graph[V][V], int path[], int pos) {
int i,j;
if (graph[path[pos-1]][path[pos]] == 0) {
return false;
}
for ( i = 0; i < pos; i++) {
if (path[i] == path[pos]) {
return false;
}
}
return true;
}
bool hamCycleUtil(int graph[V][V], int path[], int pos)
{
int i,j,v;
if (pos == V) {
return graph[path[pos-1]][path[0]] == 1;
}
for ( v = 1; v < V; v++) {
if (isSafe(graph, path, pos)) {
path[pos] = v;
if (hamCycleUtil(graph, path, pos + 1)) {
return true;
}
path[pos] = -1;
}
}
return false;
}
void findHamiltonianCircuit(int graph[V][V]) {
int path[V];
int i,j,v;
for ( i = 0; i < V; i++) {
path[i] = -1;
}
path[0] = 0;
if (hamCycleUtil(graph, path, 1) == false) {
printf("No Hamiltonian Circuit found\n");
} else {
printf("Hamiltonian Circuit found:\n");
for ( i = 0; i < V; i++) {
printf("%d ", path[i]);
}
printf("%d\n", path[0]);
}
}
int main() {
int graph[V][V] = {
{0, 1, 1, 1, 0},
{1, 0, 1, 1, 1},
{1, 1, 0, 1, 1},
{1, 1, 1, 0, 1},
{0, 1, 1, 1, 0}
};
findHamiltonianCircuit(graph);
return 0;
}
